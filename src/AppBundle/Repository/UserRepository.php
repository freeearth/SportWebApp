<?php

namespace AppBundle\Repository;

use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\HttpFoundation\Request;
use AppBundle\Entity\User;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Check current user session
     * @return User object or NULL
     */ 
    public function checkSession(Request $request) {
        $user_old = new User();
        $user_new= null;
        $session = $request->getSession();
        $serialized = $session->get("SessionSportWebAppPID");
        if (!empty($serialized)) {
            $user_old = new User();
            $user_old->unserialize($serialized);

            $user_new = $this->findOneBy(array('id' => $user_old->getId()));
            if (!empty($user_new)) {
                $password_old = $user_old->getPassword();
                $password_new = $user_new->getPassword();
                if ($password_old == $password_new) {
                    return $user_new;
                }
                else {
                    $session->clear();
                    $user_new = null;
                    return null;
                }
            }
        }
        $session->remove("SessionSportWebAppPID","");
        return $user_new;
    }
    
    
    /**
     * Check current user auth cookie
     * @return User object or null
     */
    public function checkAuthCookie(Request $request) {
        $auth_cookie = $request->cookies->get('SessionSportWebAppPID_KK');
        if (!empty($auth_cookie )) {
            $session = $request->getSession();
            // set and get session attributes
            $session->set('SessionSportWebAppPID', $auth_cookie);
            $user_new = $this->checkSession($request);
            return $user_new;
        }
        else {
            return null;
        }
    }
}
